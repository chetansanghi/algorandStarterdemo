openapi: 3.0.0
################################################################################
#                              API Information                                 #
################################################################################
servers:
  - url: 'https://{host}:{port}/'
info:
  version: '0.6'
  title: 'POS Gateway API'
  contact: {
  "name": "Erkin Karincaoglu(Erkin.Karincaoglu@fisglobal.com), Chetan G Sanghi(chetan.sanghi@fisglobal.com)",
  "email":"chetan.sanghi@fisglobal.com"
  }   
  description: |
    # References
    
    * EMV Integrated Circuit Card Specifications for Payment Systems - Book 4 Cardholder, Attendant, and Acquirer Interface Requirements<br/>
      [Book 4 Cardholder, Attendant, and Acquirer Interface Requirements](https://www.emvco.com/wp-content/uploads/2017/05/EMV_v4.3_Book_4_Other_Interfaces_20120607062305603.pdf)
    
    * EMV Integrated Circuit Card Specifications for Payment Systems - Book 3 Application Specification <br/>
      [Book 3 Application Specification](https://www.emvco.com/wp-content/uploads/2017/05/EMV_v4.3_Book_3_Application_Specification_20120607062110791.pdf)
  
    * EMV Contactless Specifications for Payment Systems <br/>
      [Book C-3 Kernel 3 Specification](https://www.emvco.com/wp-content/uploads/2017/05/C-3_Kernel_3_v2.6_20160512101602517.pdf)
      
  
    * ISO 8583 : Standard for financial transaction card originated interchange messaging<br/>
      [ISO 8583](https://en.wikipedia.org/wiki/ISO_8583)
    
        
    # Media Type
       The Media Type specifies the nature and format of the JSON file and it is defined in  **Content-Type** header. 
       
      The **Content-Type** header is required if the request you’re sending includes a request body and if the HTTP method is a POST or a PUT.
      ```
      Content-Type: application/vnd.worldpay.pos-payments-v1+json
      ```

      
    # Versioning
    The version of the API you are using is defined in the media type. The example below shows that the client is requesting the API version 1.1
    
      ```
      Content-Type: application/vnd.worldpay.pos-payments-v1.1+json
      ```

    
    # Security 
    POS APIs use JWT Based Bearer Authentication. JWT Token must contain claims to merchant and terminal operator identifiers at minimum.
    
  
    # Response Codes 
    
    A list of the  common HTTP response codes used in POS API is given below:
    
      |HTTP Code|HTTP Verb|Description|
      |--- |--- |--- |
      |200|GET POST PUT|The request has succeeded.|
      |201|POST|The request has succeeded and a new resource has been created as a result.|
      |202|GET POST|The request has succeeded, but the response body is incomplete.|
      |204|PUT DELETE|The request has succeeded, an existing resource has been updated/deleted and the response body is empty.|
      |400|POST PUT|The service could not understand the request.|
      |401|Any|The client must authenticate itself.|
      |404|GET PUT DELETE|The service can not find requested resource.|
      |409|POST|The service has experienced a conflict between the data provided in the request and the data on file.|
      |415|Any|Content-Type and/or Accept headers are missing or invalid|
      |422|Any|The request was well-formed but could not be processed due to semantic errors.|
      |500|Any|An error occurred within the service which hasn’t been accounted for.|
      |503|Any|The service is not ready to handle the request.|

    # Errors  
    
    The response contains an errorName that is both human-readable and machine-readable, with a human-readable message to add context to help you diagnose the error.

    If there are multiple errors, the response includes all the errors in a nested list within the top-level error.

    ### Generic Error Format  
    ```
    {
      "errorName": "errorName",
      "message": "human readable message"
    }
    ```
    
    ### Specific Error Format  
     
    Validation errors must also contain a path to the location of the value that caused the error. The field to use here depends on whether the error ocurred on the URL or in the JSON request body:
     
    ```
    {
      "errorName": "bodyDoesNotMatchSchema",
      "message": "The json body provided does not match the expected schema",
      "validationErrors": [
          {
            "errorName": "fieldMustBeNumber",
            "message": "Field at path must be a number",
            "jsonPath": "$.amount"
          }
        ]
      }
    ```
    
    # Domain Model - Class Diagrams
      
    ### Request Model
    
    [Authorization request](https://github.devops.worldpay.local/pages/com-worldpay-digital-services/pos-gateway-api/generate-puml.html?url=https://github.devops.worldpay.local/raw/com-worldpay-digital-services/pos-gateway-api/master/authorisation-request.puml)
    
    ### Response model
    
    [Authorization response](https://github.devops.worldpay.local/pages/com-worldpay-digital-services/pos-gateway-api/generate-puml.html?url=https://github.devops.worldpay.local/raw/com-worldpay-digital-services/pos-gateway-api/master/authorisation-response.puml)
    
  
    
   
tags:
- name: Payments
  description: |
    POS Payment operations
- name: Batch
  description: | 
    Paypoint batch Operations
    
################################################################################
#                                  Security                                    #
################################################################################
security:
  - bearerAuth: []
################################################################################
#                                   Paths                                      #
################################################################################  
paths: 
  /payments:
    get:
      tags:
      - Payments    
      summary: Payments root resource, returns links to available payments actions
      operationId: getPayments
      responses: 
       200:
          description: The request has succeeded
          content:
            'application/json':
              schema: 
                  $ref: '#/components/schemas/PaymentsResponse'



  /payments/authorisations:
    post:
      tags:
      - Payments    
      summary: Creates an authorisation request 
      operationId: createAuthorisationRequest
      parameters:
        - $ref: '#/components/parameters/merchantId'
        - $ref: '#/components/parameters/correlationId'                
      requestBody:
        content:
          application/vnd.worldpay.pos-payments-v1+json: 
            schema:
              $ref: '#/components/schemas/AuthorisationRequest'
      responses: 
       201:
          description: The Authorisation Response
          content:
            application/vnd.worldpay.pos-payments-v1+json: 
              schema: 
                $ref: '#/components/schemas/AuthorisationResponse'
       400:
          $ref: '#/components/responses/InvalidRequest'
       401:
          $ref: '#/components/responses/Unauthorized'
       403:
          $ref: '#/components/responses/Forbidden'
       500:
          $ref: '#/components/responses/InternalServerError' 
          
  /payments/authorisations/{authorisationRef}:
    get:
      tags:
      - Payments    
      summary: Returns the status of an authorisation and the available actions attached to it
      operationId: getAuthorisation
      parameters:
        - $ref: '#/components/parameters/authorisationRefPathParam'
        - $ref: '#/components/parameters/merchantId'
        - $ref: '#/components/parameters/correlationId'        
      responses: 
       200:
          description: The Authorisation Response
          content:
            application/vnd.worldpay.pos-payments-v1+json: 
              schema: 
                $ref: '#/components/schemas/AuthorisationResponse'
       400:
          $ref: '#/components/responses/InvalidRequest'
       401:
          $ref: '#/components/responses/Unauthorized'
       403:
          $ref: '#/components/responses/Forbidden'
       500:
          $ref: '#/components/responses/InternalServerError' 
          
  /payments/sales:
    post:
      tags:
      - Payments    
      summary: Performs a Sale i.e. authorization and capturing it in a batch
      operationId: performSale
      parameters:
        - $ref: '#/components/parameters/merchantId'
        - $ref: '#/components/parameters/correlationId'                
      requestBody:
        content:
          application/vnd.worldpay.pos-payments-v1+json: 
            schema:
              $ref: '#/components/schemas/AuthorisationRequest'
      responses: 
       201:
          description: The Authorisation Response
          content:
            application/vnd.worldpay.pos-payments-v1+json: 
              schema: 
                $ref: '#/components/schemas/SaleResponse'
       400:
          $ref: '#/components/responses/InvalidRequest'
       401:
          $ref: '#/components/responses/Unauthorized'
       403:
          $ref: '#/components/responses/Forbidden'
       500:
          $ref: '#/components/responses/InternalServerError' 




  /payments/accountVerifications:
    post:
      tags:
      - Payments    
      summary: Verifies the card holder information through zero authorisation
      operationId: accountVerifications
      parameters:
        - $ref: '#/components/parameters/merchantId'        
      requestBody:
        content:
          application/vnd.worldpay.pos-payments-v1+json: 
            schema:
              $ref: '#/components/schemas/AccountVerificationRequest'
      responses: 
       201:
          description: The Authorisation Response
          content:
            application/vnd.worldpay.pos-payments-v1+json: 
              schema: 
                $ref: '#/components/schemas/AccountVerificationResponse'
       400:
          $ref: '#/components/responses/InvalidRequest'
       401:
          $ref: '#/components/responses/Unauthorized'
       403:
          $ref: '#/components/responses/Forbidden'
       500:
          $ref: '#/components/responses/InternalServerError'
          
  /payments/preAuthorisations:
    post:
      tags:
      - Payments    
      summary: Creates a preauthorisation request 
      operationId: createPreAuthorisationRequest
      parameters:
        - $ref: '#/components/parameters/merchantId'   
        - $ref: '#/components/parameters/correlationId'                
      requestBody:
        content:
          application/vnd.worldpay.pos-payments-v1+json: 
            schema:
              $ref: '#/components/schemas/PreAuthorisationRequest'
      responses: 
       201:
          description: The Authorisation Response
          content:
            application/vnd.worldpay.pos-payments-v1+json: 
              schema: 
                $ref: '#/components/schemas/AuthorisationResponse'
       400:
          $ref: '#/components/responses/InvalidRequest'
       401:
          $ref: '#/components/responses/Unauthorized'
       403:
          $ref: '#/components/responses/Forbidden'
       500:
          $ref: '#/components/responses/InternalServerError'
                
  /payments/preAuthorisations/completion/{preAuthorisationRef}:
    post:
      tags:
      - Payments    
      summary:  Complete a pre-authorisation request 
      operationId: completePreAuthorisationRequest
      parameters:
        - $ref: '#/components/parameters/preAuthorisationRefPathParam'
        - $ref: '#/components/parameters/merchantId'       
        - $ref: '#/components/parameters/correlationId'                
      requestBody:
        content:
          application/vnd.worldpay.pos-payments-v1+json: 
            schema:
              $ref: '#/components/schemas/CompletionAuthorisationRequest'
      responses: 
       201:
          description: The finalized authorisation response
          content:
            application/vnd.worldpay.pos-payments-v1+json: 
              schema: 
                $ref: '#/components/schemas/AuthorisationResponse'
       400:
          $ref: '#/components/responses/InvalidRequest'
       401:
          $ref: '#/components/responses/Unauthorized'
       403:
          $ref: '#/components/responses/Forbidden'
       500:
          $ref: '#/components/responses/InternalServerError'
          
          
  /payments/preAuthorisations/incremental/{preAuthorisationRef}:
    post:
      tags:
      - Payments    
      summary:  Increment a pre-authorisation amount 
      operationId: incrementPreAuthorisationAmountRequest
      parameters:
        - $ref: '#/components/parameters/preAuthorisationRefPathParam'
        - $ref: '#/components/parameters/merchantId'      
        - $ref: '#/components/parameters/correlationId'                
      requestBody:
        content:
          application/vnd.worldpay.pos-payments-v1+json: 
            schema:
              $ref: '#/components/schemas/IncrementalAuthorisationRequest'
      responses: 
       201:
          description: The incremented pre-authorisation response
          content:
            application/vnd.worldpay.pos-payments-v1+json: 
              schema: 
                $ref: '#/components/schemas/AuthorisationResponse'
       400:
          $ref: '#/components/responses/InvalidRequest'
       401:
          $ref: '#/components/responses/Unauthorized'
       403:
          $ref: '#/components/responses/Forbidden'
       500:
          $ref: '#/components/responses/InternalServerError'
          
          
  /payments/authorisations/cancellations/{authorisationRef}:
    post:
      tags:
      - Payments    
      summary: Reverse an authorisation 
      description:  Reversal API should only be used when the client  gets a system error or timeout for an authorisation request. Reversal request should be the immediate next message after the authorisation request from the same terminal.
      operationId: reverseAuthorisation
      parameters:
        - $ref: '#/components/parameters/authorisationRefPathParam'
        - $ref: '#/components/parameters/merchantId'      
        - $ref: '#/components/parameters/correlationId'   
      requestBody:
        content:
          application/vnd.worldpay.pos-payments-v1+json: 
            schema:
              $ref: '#/components/schemas/AuthorisationReversalRequest'
        
      responses: 
       200:
          description: The Authorisation Reversal Response
          content:
            application/vnd.worldpay.pos-payments-v1+json: 
              schema: 
                $ref: '#/components/schemas/AuthorisationResponse'
       400:
          $ref: '#/components/responses/InvalidRequest'
       401:
          $ref: '#/components/responses/Unauthorized'
       403:
          $ref: '#/components/responses/Forbidden'
       500:
          $ref: '#/components/responses/InternalServerError'                 
                
                               
  /payments/settlements/{authorisationRef}:
    post:
      tags:
      - Payments    
      summary: Creates a capture request 
      operationId: createReferencedCaptureRequest
      parameters:
        - $ref: '#/components/parameters/authorisationRefPathParam'    
        - $ref: '#/components/parameters/merchantId'     
        - $ref: '#/components/parameters/correlationId'                
      requestBody:
        content:
          application/vnd.worldpay.pos-payments-v1+json: 
            schema:
              $ref: '#/components/schemas/ReferencedCaptureRequest'
      responses: 
       201:
          description: The Capture Response
          content:
            application/vnd.worldpay.pos-payments-v1+json: 
              schema: 
                $ref: '#/components/schemas/CaptureResponse'
       400:
          $ref: '#/components/responses/InvalidRequest'
       401:
          $ref: '#/components/responses/Unauthorized'
       403:
          $ref: '#/components/responses/Forbidden'
       500:
          $ref: '#/components/responses/InternalServerError'


  /payments/settlements:
    post:
      tags:
      - Payments    
      summary: Creates an offline sale or refund request
      operationId: createCaptureRequest
      parameters:
        - $ref: '#/components/parameters/merchantId'        
        - $ref: '#/components/parameters/correlationId'                
      requestBody:
        content:
          application/vnd.worldpay.pos-payments-v1+json: 
            schema:
              $ref: '#/components/schemas/CaptureRequest'
      responses: 
       201:
          description: The Capture Response
          content:
            application/vnd.worldpay.pos-payments-v1+json: 
              schema: 
                $ref: '#/components/schemas/CaptureResponse'
       400:
          $ref: '#/components/responses/InvalidRequest'
       401:
          $ref: '#/components/responses/Unauthorized'
       403:
          $ref: '#/components/responses/Forbidden'
       500:
          $ref: '#/components/responses/InternalServerError'


  /payments/settlements/cancellations/{captureRef}:
    post:
      tags:
      - Payments    
      summary: Cancel settlement 
      description:  Cancels a settlement
      operationId: cancelSettlement
      parameters:
        - $ref: '#/components/parameters/captureRefPathParam'
        - $ref: '#/components/parameters/merchantId'        
        - $ref: '#/components/parameters/correlationId'                
      responses: 
       201:
          description: The Cancellation Response
          content:
            application/vnd.worldpay.pos-payments-v1+json: 
              schema: 
                $ref: '#/components/schemas/CaptureResponse'
       400:
          $ref: '#/components/responses/InvalidRequest'
       401:
          $ref: '#/components/responses/Unauthorized'
       403:
          $ref: '#/components/responses/Forbidden'
       500:
          $ref: '#/components/responses/InternalServerError'  
          
  /payments/settlements/refunds/{captureRef}:
    post:
      tags:
      - Payments    
      summary: Creates a referenced refund request 
      operationId: createReferencedRefundRequest
      parameters:
        - $ref: '#/components/parameters/captureRefPathParam'     
        - $ref: '#/components/parameters/merchantId'        
        - $ref: '#/components/parameters/correlationId'                
      requestBody:
        content:
          application/vnd.worldpay.pos-payments-v1+json: 
            schema:
              $ref: '#/components/schemas/ReferencedRefundRequest'
      responses: 
       201:
          description: The Refund Response
          content:
            application/vnd.worldpay.pos-payments-v1+json: 
              schema: 
                $ref: '#/components/schemas/CaptureResponse'
       400:
          $ref: '#/components/responses/InvalidRequest'
       401:
          $ref: '#/components/responses/Unauthorized'
       403:
          $ref: '#/components/responses/Forbidden'
       500:
          $ref: '#/components/responses/InternalServerError'   
          
          
  /payments/events:
    get:
      tags:
      - Payments    
      summary: Return the status and reference of a payment by transactionReference or scheme transaction reference data
      operationId: getPaymentStatus
      parameters:
        - $ref: '#/components/parameters/transactionReference'           
        - $ref: '#/components/parameters/merchantId'      
        - $ref: '#/components/parameters/correlationId'   
        - $ref: '#/components/parameters/schemeTransactionReference'           
      responses: 
       200:
          description: The Payment status response
          content:
            application/vnd.worldpay.pos-payments-v1+json: 
              schema: 
                $ref: '#/components/schemas/PaymentStatusResponse'
       400:
          $ref: '#/components/responses/InvalidRequest'
       401:
          $ref: '#/components/responses/Unauthorized'
       403:
          $ref: '#/components/responses/Forbidden'
       500:
          $ref: '#/components/responses/InternalServerError' 
  
  /batches/{paypointBatchReference}:
    get:
      tags:
      - Batch    
      summary: Returns the batch summary report for a paypoint/terminal. 
      description: | 
        Conceptually similar to X report. A reference link to  batch close operation is returned after all
        the capture and refund requests if the merchant gateway configuration supports manual batch closure. 
      operationId: getBatch
      parameters:
        - $ref: '#/components/parameters/batchRefPathParam'     
      responses: 
       200:
          description: The batch report
          content:
            application/vnd.worldpay.pos-payments-v1+json: 
              schema: 
                $ref: '#/components/schemas/BatchReport'
       400:
          $ref: '#/components/responses/InvalidRequest'
       401:
          $ref: '#/components/responses/Unauthorized'
       403:
          $ref: '#/components/responses/Forbidden'
       500:
          $ref: '#/components/responses/InternalServerError' 
    patch:
      tags:
      - Batch    
      summary: |
        Closes the current batch and returns the batch summary report for a paypoint/terminal.
      description: |
        Conceptually similar to Z report.A reference link to  batch close operation is returned after 
        all the capture and refund requests if the merchant gateway configuration 
        supports manual batch closure. 
      operationId: closeBatch
      parameters:
        - $ref: '#/components/parameters/batchRefPathParam'     
      responses: 
       200:
          description: The batch report
          content:
            application/vnd.worldpay.pos-payments-v1+json: 
              schema: 
                $ref: '#/components/schemas/BatchReport'
       400:
          $ref: '#/components/responses/InvalidRequest'
       401:
          $ref: '#/components/responses/Unauthorized'
       403:
          $ref: '#/components/responses/Forbidden'
       500:
          $ref: '#/components/responses/InternalServerError'           

  
  /batches/reconciliations/{paypointBatchReference}:
    patch:
      tags:
      - Batch
      summary: | 
        Reconciles and closes the current batch for a paypoint/terminal. 
      description: |
        A reference link to a reconciliation operation is returned after all the capture and refund requests if the merchant gateway configuration supports reconcilations.
      operationId: reconcileBatch
      parameters:
        - $ref: '#/components/parameters/batchRefPathParam' 
      requestBody:
        content:
          application/vnd.worldpay.pos-payments-v1+json: 
            schema:
              $ref: '#/components/schemas/ReconciliationRequest'
      responses: 
       201:
          description: The Reconciliation Response
          content:
            application/vnd.worldpay.pos-payments-v1+json: 
              schema: 
                $ref: '#/components/schemas/ReconciliationResponse'
       400:
          $ref: '#/components/responses/InvalidRequest'
       401:
          $ref: '#/components/responses/Unauthorized'
       403:
          $ref: '#/components/responses/Forbidden'
       500:
          $ref: '#/components/responses/InternalServerError'

          
################################################################################
#                                 Definitions                                  #
################################################################################
components:
################################################################################
#                             Parameters                                       #
################################################################################
  parameters:

    batchRefPathParam:
      name: paypointBatchReference
      in: path
      required: true
      description: HATEOAS paypoint batch reference 
      schema:
        type: string
        example: werwersasd
        
    transactionReference:
      name: transactionReference
      in: query
      required: false
      description: Transaction reference query parameter
      schema:
        type: string
        example: etgetdjtcv
        
        
    captureRefPathParam:
      name: captureRef
      in: path
      required: true
      description: Capture HATEOAS reference
      schema:
        type: string
        example: eyJrIjoiazNhYjYzMiJ9
        
    authorisationRefPathParam:
      name: authorisationRef
      in: path
      required: true
      description: Authorisation HATEOAS reference
      schema:
        type: string
        example: eyJrIjoiazNhYjYzMiJ9
        
    preAuthorisationRefPathParam:
      name: preAuthorisationRef
      in: path
      required: true
      description: Pre authorisation HATEOAS reference. 
      schema:
        type: string
        example: eyJrIjoiazNhYjYzMiJ9


    correlationId:
      name: x-wp-correlation-id
      in: header
      required: true
      description: A unique co-relation id for a request to link request/response
      schema:
        type: string
        format: uuid

    merchantId:
      name: x-wp-merchant-id
      in: header
      required: true
      description: Merchant Identifier for the Request
      schema:
        type: string
        example: "0000012345"

    schemeTransactionReference:
      name: schemeTransactionReference
      in: query
      required: false
      description: Unique Scheme Transaction Reference Data provided by Issuer/Scheme for a series of authorization or a single authroization
      schema:
        type : string
        maxLength: 32


  schemas:
################################################################################
#                             Schema Messages                                  #
################################################################################


    PreAuthorisationRequest:
      type: object
      required:
        - transactionReference
        - paypoint
        - instruction
      description: Pre Authorisation Request  
      properties:
        transactionReference: 
          allOf:
            - $ref: '#/components/schemas/transactionReference'
        transactionDateTime:
          allOf:
            - $ref: '#/components/schemas/transactionDateTime'
        location:
          $ref: '#/components/schemas/Location'
        paypoint:
          $ref: '#/components/schemas/Paypoint'
        additionalData:
          $ref: '#/components/schemas/AdditionalData'
        instruction:
          description: >
            An object that contains all the information related to the payment.
          type: object
          required:
            - value
            - paymentInstrument
            - posEntryMode
          properties:
            value:
              $ref: '#/components/schemas/Value'
            narrative:
              $ref: '#/components/schemas/Narrative'
            posEntryMode:
              $ref: '#/components/schemas/posEntryModeAuthorisation' 
            reasonOnlineCode:
              allOf:
              - $ref: '#/components/schemas/reasonOnlineCode'
            paymentInstrument:
              oneOf:
              - $ref: '#/components/schemas/Card'              
              - $ref: '#/components/schemas/ICC'
              - $ref: '#/components/schemas/Token'                 
              discriminator:
                propertyName: type
                mapping: 
                  card: '#/components/schemas/Card'                
                  icc: '#/components/schemas/ICC'
                  token: '#/components/schemas/Token'                  


    AccountVerificationRequest:
      type: object
      required:
        - transactionReference
        - paypoint
        - instruction
        - client
      description: Verifies the card holder information without charging the consumer.
      properties:
        transactionReference: 
          allOf:
            - $ref: '#/components/schemas/transactionReference'
        transactionDateTime:
          allOf:
            - $ref: '#/components/schemas/transactionDateTime'
        location:
          $ref: '#/components/schemas/Location'
        paypoint:
          $ref: '#/components/schemas/Paypoint'
        instruction:
          description: >
            An object that contains all the information related to the payment.
            @todo can we remove isoTransactionType, posEntryMode and reasonOnlineCode from ZeroAuthorisation Instruction. can we set these on the server side ? 
          type: object
          required:
            - value
            - paymentInstrument
            - tokenIndicator
          properties:
            posEntryMode:
              $ref: '#/components/schemas/posEntryModeAuthorisation' 
            reasonOnlineCode:
              allOf:
              - $ref: '#/components/schemas/reasonOnlineCode'
            narrative:
              $ref: '#/components/schemas/Narrative'    
            tokenIndicator:
              description: The purpose for which token will be used for
              type: string
              enum: [INSTALLMENT,RECURRING,UNSCHEDULED,NOT_APPLICABLE]
            paymentInstrument:
              oneOf:
              - $ref: '#/components/schemas/Card'          
              discriminator:
                propertyName: type
                mapping: 
                 card: '#/components/schemas/Card'     
                 
        additionalData:
          $ref: '#/components/schemas/AdditionalData'
          
          
    AuthorisationRequest:
      type: object
      required:
        - transactionReference
        - paypoint
        - instruction
      description: AuthorisationRequest  
      properties:
        transactionReference: 
          allOf:
            - $ref: '#/components/schemas/transactionReference'
        transactionDateTime:
          allOf:
            - $ref: '#/components/schemas/transactionDateTime'
        location:
          $ref: '#/components/schemas/Location'
        paypoint:
          $ref: '#/components/schemas/Paypoint'
        instruction:
          $ref: '#/components/schemas/Instruction' 
        additionalData:
          $ref: '#/components/schemas/AdditionalData'
          
    IncrementalAuthorisationRequest:
      type: object
      description: Request to increment a pre-authorisation amount.
      allOf:
        - $ref: '#/components/schemas/CompletionAuthorisationRequest'
          
    
    CompletionAuthorisationRequest:
      type: object
      description :  >
        A request for incremental authorisation and/or  completing/finalizing a pre-authorisation  request in 
        series of authorisation.
      required:
        - payPointId
        - instruction
      properties:
        transactionDateTime:
          allOf:
            - $ref: '#/components/schemas/transactionDateTime'
        payPointId:
          $ref: '#/components/schemas/PaypointId'
        additionalData:
          $ref: '#/components/schemas/AdditionalData'
        instruction:
          description: >
            An object that contains all the information related to the payment.
          type: object
          required:
            - value
          properties:
            value:
              allOf:
                - $ref: '#/components/schemas/Value'
              # - Overriden description of the value object
              description: |  
                For Incremental Authorisation, this would be additional authorisation amount, on top of existing Pre Authorized amount.
                
                There could be one or many Incremental Authorisation on top of existing Pre-Authorisation.
                
                To complete Authorisation, this would be the final monetary value of the payment which would be sent for Settlement. 
                
                The complete authorisation amount can be lower than the total pre-authorisation and incremental authorisation amount. However the final authorisation amount can only be set to a higher value than the total pre-authorisation value only if your merchant MCC code allows such  a transaction.              
            narrative:
              $ref: '#/components/schemas/Narrative'
            posEntryMode:
              $ref: '#/components/schemas/posEntryModeAuthorisation' 
            reasonOnlineCode:
              allOf:
              - $ref: '#/components/schemas/reasonOnlineCode'
            paymentInstrument:
              description: >
                For Subsequent Authorisation, Payment Instrument is Optional. If provided, then the details  provided would be used and if not provided, then the details from pre authoriation reference would be used.
              oneOf:
              - $ref: '#/components/schemas/Card'              
              - $ref: '#/components/schemas/ICC'
              - $ref: '#/components/schemas/Token'                 
              discriminator:
                propertyName: type
                mapping: 
                  card: '#/components/schemas/Card'                
                  icc: '#/components/schemas/ICC'
                  token: '#/components/schemas/Token'                  
          
    ReferencedCaptureRequest:
      type: object
      description :  A request to capture an existing authorisation
      required:
        - transactionDateTime      
        - payPointId
        - instruction
        - payPointCapabilities
        - posTransactionResult
        - payPointTerminalType
      properties:
        transactionDateTime:
          allOf:
            - $ref: '#/components/schemas/transactionDateTime'
        payPointId:
          $ref: '#/components/schemas/PaypointId'
        payPointCapabilities:
          $ref: '#/components/schemas/PayPointCapabilities'
        payPointTerminalType:
          $ref: '#/components/schemas/PayPointTerminalType'
        captureAdditionalData:
          $ref: '#/components/schemas/CaptureAdditionalData'
        instruction:
          description: >
            An object that contains all the information related to the payment.
          type: object
          required:
            - posEntryMode
            - paymentInstrument
          properties:
            posEntryMode:
              $ref: '#/components/schemas/posEntryModeCapture'                   
            paymentInstrument:
              oneOf:
              - $ref: '#/components/schemas/Card'
              - $ref: '#/components/schemas/ICC'
              - $ref: '#/components/schemas/AliPay'
              - $ref: '#/components/schemas/WeChatPay'
              - $ref: '#/components/schemas/FuelCard'
              - $ref: '#/components/schemas/Token'              
              discriminator:
                propertyName: type
                mapping: 
                  card: '#/components/schemas/Card'
                  icc: '#/components/schemas/ICC'
                  alipay: '#/components/schemas/AliPay'
                  wechatpay: '#/components/schemas/WeChatPay'
                  fuelcard: '#/components/schemas/FuelCard'
                  token: '#/components/schemas/Token'    
            value:
              allOf:
                - $ref: '#/components/schemas/Value'
            reasonOnlineCode:
              allOf:
              - $ref: '#/components/schemas/reasonOnlineCode'
                
                  
        posTransactionResult: 
          $ref: '#/components/schemas/posTransactionResult'


    ReferencedRefundRequest:
      type: object
      description :  A request to refund an existing transaction      
      required:
        - transactionDateTime      
        - payPointId
        - instruction
      properties:
        transactionDateTime:
          allOf:
            - $ref: '#/components/schemas/transactionDateTime'
        payPointId:
          $ref: '#/components/schemas/PaypointId'
        location:
          $ref: '#/components/schemas/Location'
        refundAdditionalData:
          $ref: '#/components/schemas/RefundAdditionalData'
        instruction:
          description: >
            An object that contains all the information related to the payment.
          type: object
          required:
            - amount            
          properties:
            amount:   
              $ref: '#/components/schemas/amount'            
            narrative:
              $ref: '#/components/schemas/Narrative'             
            paymentInstrument:
              oneOf:
              - $ref: '#/components/schemas/Token'
              discriminator:
                propertyName: type
                mapping: 
                  token: '#/components/schemas/Token'
                  
    CaptureRequest:
      type: object
      description :  A request to perform an offline sale or refund
      required:
        - transactionReference   
        - transactionDateTime
        - payPoint
        - instruction
        - posTransactionResult
      properties:
        transactionReference: 
          allOf:
            - $ref: '#/components/schemas/transactionReference'
        transactionDateTime:
          allOf:
            - $ref: '#/components/schemas/transactionDateTime'
        location:
          $ref: '#/components/schemas/Location'
        payPoint:
          $ref: '#/components/schemas/Paypoint'
        captureAdditionalData:
          $ref: '#/components/schemas/CaptureAdditionalData'
        posTransactionResult: 
          $ref: '#/components/schemas/posTransactionResult'
        instruction:
          description: >
            An object that contains all the information related to the payment.
          type: object
          required:
            - paymentInstrument
            - value
            - posEntryMode
          properties:
            value:
              allOf:
                - $ref: '#/components/schemas/Value'
            narrative:
              $ref: '#/components/schemas/Narrative'
            transactionType:
              $ref: '#/components/schemas/transactionType'
            posEntryMode:
              $ref: '#/components/schemas/posEntryModeCapture' 
            reasonOnlineCode:
              allOf:
              - $ref: '#/components/schemas/reasonOnlineCode'
            paymentInstrument:
              oneOf:
              - $ref: '#/components/schemas/Card'
              - $ref: '#/components/schemas/ICC'
              - $ref: '#/components/schemas/FuelCard'              
              discriminator:
                propertyName: type
                mapping: 
                  card: '#/components/schemas/Card'
                  icc: '#/components/schemas/ICC'
                  fuelcard: '#/components/schemas/FuelCard'        
     
    AuthorisationReversalRequest:
      type: object
      description :  A request to perform an authorisation reversal
      required:
        - transactionDateTime
        - instruction
      properties:
        transactionDateTime:
          allOf:
            - $ref: '#/components/schemas/transactionDateTime'
        payPointId:
          $ref: '#/components/schemas/PaypointId'
        instruction:
          description: >
            An object that contains all the information related to the payment.
          type: object
          required:
            - paymentInstrument
          properties:
            paymentInstrument:
              oneOf:
              - $ref: '#/components/schemas/Card'
              - $ref: '#/components/schemas/ICC'              
              - $ref: '#/components/schemas/FuelCard'              
              discriminator:
                propertyName: type
                mapping: 
                  card: '#/components/schemas/Card'
                  icc: '#/components/schemas/ICC'                  
                  fuelcard: '#/components/schemas/FuelCard' 
                example: "card"                  
     
    PaymentStatusResponse:
      type: object
      description: |
        Payment status and avaliable actions for this payment
      properties:
        lastEvent:
          type: string
          description: >
            Status of this payment. 
            Declined - Authorization was attempted has and has been refused. This applies to settlement requested either for online
            authorization or for offline settlement whether there is no authorization. 
            Error - Request submitted is not valid.
            Cancelled - Payment has been authorized but stopped from being sent for clearing and settlement
            Voided - Payment was authorized and proceeded for settlement and subsequently has been reversed and removed from settlement.
            Settled - Payment Gateway has instructed Acquirer to transfer the funds
            Cleared - Acquirer has transferred the funds to Merchant
          enum : [ Authorized,Authorization In Progress, Referred, Reversed, Refused, Pre Authorized,Incremental Authorized, Completed, Captured, 
                   Settled, Cleared, Refund Requested, Refund Failed, Refunded, Cancelled, Voided, Declined, Error ]
        _links:
          allOf: 
            - $ref: '#/components/schemas/Links'  
          description: List of available actions for this payment
          
    ReconciliationResponse:
      type: object
      description: Reconciliation Response
      required:
        - reconciliationOutcome  
      properties:
        reconciliationOutcome:
          type: string
          description: Outcome of the reconciliation request. If the totals checks are successful outcome is set to success otherwise it is set to failure. 
          enum : [ SUCCESS, FAILURE ]
        message:
          type: string
          description: Reconciliation outcome message. It is populated only if the reconciliation outcome was a failure.
    
    AccountVerificationResponse:
      type: object
      description: | 
        Outcome of the account verification request. 
      required:
        - authorisationOutcome
      properties:
        authorisationOutcome:
          type: string
          description: Outcome of the account verification request
          enum : [ AUTHORISED, REFUSED]
        tokenId:
          description: >  
            A token representing card details.
          type: string
          minLength: 15
          maxLength: 21
          example: "ABCDE1234567890"          
        riskFactors:
          $ref: '#/components/schemas/RiskFactorsList'
        issuer:
          allOf:
            - $ref: '#/components/schemas/issuer'  
        acquirer:
          allOf:
            - $ref: '#/components/schemas/acquirer'  
        authorisationPayPoint:
          allOf:
            - $ref: '#/components/schemas/authorisationPayPoint'  
        _links:
          $ref: '#/components/schemas/Links'      

    AuthorisationResponse:
      type: object
      description: |
        ##### Authorisation Response
        ##### Successful payment
        You receive:
        * a HTTP code 201
        * an "outcome": "authorized"
        * risk factors (only returned if issuer identifies conflict)
        * an issuer authorization code
        * links to cancel, settle, partially settle or track payment events
        
        ##### Refused payment
        You receive:
        
        * an "outcome": "refused"
        * an issuer refusal authorization code
        * a description which gives additional context on the refusal
        * risk factors (only returned if issuer identifies conflict) 
        
        ##### Referral required
        You receive:
        
        * an "outcome": "referral"
        * a referral number
        * risk factors (only returned if issuer identifies conflict) 
        
      required:
        - authorisationOutcome
      properties:
        authorisationOutcome:
          type: string
          description: Outcome of the authorisation request
          enum : [ AUTHORISED, REFUSED, REFERRAL, AUTHORISATION IN PROGRESS ]
        mode:
          type: string
          description: Mode of the authorisation request
          enum : [ ONLINE, OFFLINE ]
        riskFactors:
          $ref: '#/components/schemas/RiskFactorsList'
        issuer:
          allOf:
            - $ref: '#/components/schemas/issuer'  
        acquirer:
          allOf:
            - $ref: '#/components/schemas/acquirer'  
        authorisationPayPoint:
          allOf:
            - $ref: '#/components/schemas/authorisationPayPoint'  
        referralNumber:
          type: string 
          description: This number is needed to contact the acquirer mostly for case of Referral.
        paymentGateway:
          allOf:
            - $ref: '#/components/schemas/paymentGateway'  
        _links:
          type: object
          additionalProperties: true 
          example:
            "payments:cancel": 
              "href": "/payments/authorisations/cancellations/ajyTbbsnsybsT"
            "payments:settle": 
              "href": "/payments/settlements/ajyTbbsnsybsT"
            "curies" : 
              - name: "payments"
                href: "/rels/payments/{rel}"
                templated: true
    
    issuer:
      type: object
      description: Information returned by customer's card issuer based on the authorization request.
      properties:
        issuerReference:
          type: string
          description: Issuer unique reference
        authorisationCode:
          type: string
          description: The authorization code returned by customer's card issuer.
        authorisationMessage:
          type: string
          description:  The authorisation message returned by the issuer.
        approvedAmount:   
          $ref: '#/components/schemas/amount'                         
        iccResponseData:
          type: object
          description: Chip transacton response details. Present if the payment instrument  was "icc" for the authorisation request.
          properties: 
            issuerScriptData:
              type: string
              description: issuer script data
            issuerAuthenticationData: 
              type: string
              description: issuer authentication data    
    
    authorisationPayPoint:
      type: object
      description: Authorisation response paypoint instructions. 
      properties:
        keyChangeRequestFlag:
          type: boolean
          description:  > 
            Whether a key change at the paypoint required. This would happen if paypoint key got corrupted or expired.
        currentKeyIndex:
          type: string
          description: Current index of key on the host platform
        batchNumber:
          type: integer
          description: This is batch number for the paypoint under which authorisation have been processed.
        receiptMessage:
          type: string
          description: Print on message for DCC/VAT authorisation    
          
    acquirer:
      type: object
      description: Information returned by the  acquirer
      properties:
        acquirerReference:
          type: string
          description: Acquirer unique reference
        acquirerResponseCode: 
          type: string
          description: The acquirer response code returned by the acquirer
        retrievalReferenceNumber:
          type: string
          description: 
            Unique reference assigned by Merchant or Terminal initiating the transaction.

    paymentGateway:
      type: object
      description: Information returned by the  PaymentGateway
      properties:
        tokenIdentifier:
          type: string
          description: Payment Token Identifier for Payment Instrument
        avsResponse: 
          $ref: '#/components/schemas/avsResponse'
        expiryDate:
         $ref: '#/components/schemas/cardDate'
         


    avsResponse:
      description: >
        Details for result of address verification check. First position means CSC/CVV(Card Security Code/Card Verification Value), Second Position as Post Code, Third Position as Address. Each position can valid values as 0 - Not Applicable, 1 - Not Checked, 2 - Matched, 4 - Not Matched    
      type: object
      required:
        - cvvResult
        - postcodeResult
        - addressResult
      properties:
        cvvResult:
          allOf:
            - $ref: '#/components/schemas/avsResult'
            # - Overriden description of the avsResult object
          description: >  
            Outcome of the CSC/CVV Check as part of AVS(Address Verification Service) request.
        postcodeResult:
          allOf:
            - $ref: '#/components/schemas/avsResult'
            # - Overriden description of the avsResult object
          description: >  
            Outcome of the PostCode Check as part of AVS(Address Verification Service) request.
        addressResult:
          allOf:
            - $ref: '#/components/schemas/avsResult'
            # - Overriden description of the avsResult object
          description: >  
            Outcome of the Address Check as part of AVS(Address Verification Service) request.

        
    avsResult:
      type: string
      description: >
        Possible outcome for avsResult
      enum: [ NOT APPLICABLE, NOT CHECKED, MATCHED, NOT MATCHED ]
      
    PaymentsResponse: 
      type: object
      description: >
        Payments Response
      allOf:
        -  $ref: '#/components/schemas/Links'
        
        
    Links:
      description: >
        Contains links to other resources. Please see
        https://tools.ietf.org/html/draft-kelly-json-hal-08
      properties:
        _links:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Link'
          example: 
           {"payments:authorize":{ "href":"https://{host:port}}/payments/authorizations"}}
        curies:
          type: array
          items:
            $ref: '#/components/schemas/Curie'           
            
    CaptureResponse:
      type: object
      description: |
        ##### Capture Response
        ##### Successful Transaction [ Capture, Refund ]
        You receive:
        * a HTTP code 201
        * an "outcome": "success"
        * an identifier to track the payment
        * links to track payment events
        
        ##### Declined Transaction [ Capture, Refund ]
        You receive:
        
        * an "outcome": "declined"
        
      required:
        - transactionOutcome
      properties:
        transactionOutcome:
          type: string
          description: Outcome of the transaction request
          enum : [ SUCCESS, DECLINE]
        _links:
          type: object
          additionalProperties: true 
          example:
            "payments:cancel": 
              "href": "/payments/settlements/cancellations/ajyTbbsnsybsT"
            "payments:refund": 
              "href": "/payments/settlements/refunds/ajyTbbsnsybsT"
            "curies" : 
              - name: "payments"
                href: "/rels/payments/{rel}"
                templated: true 
          
    SaleResponse:
      type: object
      description: |
        You receive:
        * a HTTP code 201
        * an "outcome": "success"
        * an identifier to track the payment
        * links to track payment events
        You receive:
      required:
        - transactionOutcome
      properties:
        transactionOutcome:
          type: string
          description: Outcome of the transaction request
          enum : [ SUCCESS, DECLINE]
        issuer:
          allOf:
            - $ref: '#/components/schemas/issuer'  
        acquirer:
          allOf:
            - $ref: '#/components/schemas/acquirer'  
        _links:
          type: object
          additionalProperties: true 
          example:
            "payments:cancel": 
              "href": "/payments/settlements/cancellations/ajyTbbsnsybsT"
            "payments:refund": 
              "href": "/payments/settlements/refunds/ajyTbbsnsybsT"
            "curies" : 
              - name: "payments"
                href: "/rels/payments/{rel}"
                templated: true 

################################################################################
#                               Domain Models                                  #
################################################################################
 
    AdditionalData:
      description: Additional authorization data.
      type: object
      properties:
        customerFriendlyReferenceIdentifier:
          description: Additional customer reference identifier generated by you.
          type: string
          maxLength: 100


    CaptureAdditionalData:
      allOf:
        - $ref: '#/components/schemas/AdditionalData'
      description: Additional data common for offline and referenced capture.
      type: object
      properties:
        posAuthorisationResultCode: 
          allOf:
            - $ref: '#/components/schemas/posAuthorisationResultCode'
          description: Client needs to provide in case authorisation is processed at Terminal.
        authorisationCode:
          description: Authorisation Code for Offline Capture(Sale/Refund)
          type: string
          maxLength: 6       
         

    RefundAdditionalData:
      allOf:
        - $ref: '#/components/schemas/CaptureAdditionalData'
      description: Additional data just for offline capture.
      type: object
      properties:
        omniChannelTransactionIdentifier:
          description: Transaction Reference for OmniChannel/ECOM Sale transaction.
          type: string
          maxLength: 50          
        omniChannelMerchantIdentifier:
          description: Merchant Reference for OmniChannel/ECOM merchant.
          type: string
          maxLength: 50    


    RiskFactorsList:
      type: array
      description: >
        The riskFactors array is returned only if there is a risk associated with the authorization request. 
      items:
        $ref: '#/components/schemas/RiskFactor'
    
    RiskFactor:
      type: object
      description: >
        Risk Factor.
      properties:
        type: 
          type: string
          description: type of risk
        detail:
          type: string
          description: risk details        
          
    PaypointId:
      description: >
        Identifier for payment point initiating transaction. 
      type: string
      minLength: 8
      maxLength: 8
      example: 12345678
          
    PayPointCapabilities:
      type: string
      format: byte
      minLength: 3
      maxLength: 3 
      description: >
        Terminal capabilities defined in EMV v4.1, Book 4 – Annex A. <br/>
        A2. Terminal Capabilities and A3.Additional Terminal Capabilities
        
    PayPointTerminalType:
      description: >
        Terminal type  defined in EMV.This should map to starting value as 21 and ending value as 26 i.e. range from 21 to 26
      type: string
      enum: [ATTENDED_ONLINE,ATTENDED,ATTENDED_OFFLINE,UNATTENDED_ONLINE,UNATTENDED,UNATTENDED_OFFLINE]

    Paypoint:
      type: object
      description: The paypoint on which the payment  has been performed on.
      required:
        - paypointId
        - countryCode
        - terminalType
      properties:
        paypointId: 
          type: string 
          description: >
            Unique paypoint identifier.
          minLength: 8
          maxLength: 10
          example: '987654321'  
        countryCode:
          $ref: '#/components/schemas/isoCountryCode'        
        deviceSerialNumber:
          description: >
            The serial number of the payment device.
          type: string
          minLength: 1
          maxLength: 256
          example: 'A123-4567890'
        terminalType:
          $ref: '#/components/schemas/PayPointTerminalType'        
        capabilities:
          $ref: '#/components/schemas/PayPointCapabilities'
        additionalCapabilities:
          type: string
          format: byte
          minLength: 5
          maxLength: 5 
          description: >
            Terminal capabilities defined in EMV v4.1, Book 4 – Annex A. <br/>
            A2. Terminal Capabilities and A3.Additional Terminal Capabilities
        version:
          description: >
            todo :  version of the operation system on terminal ? 
          type: string            
    
    reasonOnlineCode:
      description: >
        2 digit provisional European standard (prENV 1750)  online reason code indicating why the authorisation was attempted online.
        
        
        The On-line reason codes are four digits in the form 15XX for POS type of environment. As all POS codes begin 15 there is no need to send this fixed value and therefore only the XX as defined in the ENV 1750 needs to be transmitted. 
        
        
        Reason On-line will be used by the acquirer to determine if stand-in authorisation would be an appropriate action for this transaction.
          i.e. was it the ICC or the CAD which required an on-line authorisation.
      type: string
      minLength : 2
      maxLength: 2     
    
    Instruction:
      description: >
        An object that contains all the information related to the payment.
      type: object
      required:
        - value
        - paymentInstrument
      properties:
        transactionType:
          $ref: '#/components/schemas/transactionType'
        value:
          $ref: '#/components/schemas/Value'
        narrative:
          $ref: '#/components/schemas/Narrative'
        posEntryMode:
          $ref: '#/components/schemas/posEntryModeAuthorisation' 
        reasonOnlineCode:
          allOf:
          - $ref: '#/components/schemas/reasonOnlineCode'
        paymentInstrument:
          oneOf:
          - $ref: '#/components/schemas/Card'          
          - $ref: '#/components/schemas/ICC'
          - $ref: '#/components/schemas/AliPay'
          - $ref: '#/components/schemas/WeChatPay'
          - $ref: '#/components/schemas/FuelCard'
          - $ref: '#/components/schemas/Token'
          - $ref: '#/components/schemas/ApplePay'
          - $ref: '#/components/schemas/GooglePay'          
          - $ref: '#/components/schemas/CryptoWallet'          
          discriminator:
            propertyName: type
            mapping: 
             card: '#/components/schemas/Card'            
             icc: '#/components/schemas/ICC'
             alipay: '#/components/schemas/AliPay'
             wechatpay: '#/components/schemas/WeChatPay'
             fuelcard: '#/components/schemas/FuelCard'
             token: '#/components/schemas/Token'
             applepay: '#/components/schemas/ApplePay'
             googlepay: '#/components/schemas/GooglePay'       
             cryptowallet: '#/components/schemas/CryptoWallet'             
          example: "card"

    PaymentInstrument:
      type: object
      description: >
        An object that contains the payment type and details.
      required:
        - type      
      properties:
        type: 
          type: string
          description: Payment instrument used in payment
          example: "card/icc/alipay/wechatpay"
      discriminator:
        propertyName: type

    BarCode:
      allOf:
        - $ref: '#/components/schemas/PaymentInstrument'
      type: object


    AliPay:
      allOf:
        - $ref: '#/components/schemas/BarCode'
      type: object
      required:
        - barCode
      properties:
        barcode:
          description: >
            The barcode value generated by the customer's application.
          type: string
          minLength: 16
          maxLength: 24
          default: "123456789012345678"
        type: 
          example: "alipay"
          
          
    WeChatPay:
      allOf:
        - $ref: '#/components/schemas/BarCode'
      type: object
      required:
        - barCode
      properties:
        barcode:
          description: >
            The barcode value generated by the customer's application.
          type: string
          minLength: 16
          maxLength: 24
          default: "123456789012345678"          
        type: 
          example: "wechatpay"
          
    FuelCard:
      allOf:
        - $ref: '#/components/schemas/Card'
      type: object
      properties:
        fuelCard:
          description: >
            Fuel card data. Not used yest
          type: string
          maxLength: 100
        type: 
          example: "fuelcard"

    Token:
      allOf:
        - $ref: '#/components/schemas/PaymentInstrument'
      description: Details for a token based payment instrument.
      type: object
      required:
        - tokenId
      properties:
        tokenId:
          description: >  
            A token representing card details.
          type: string
          minLength: 15
          maxLength: 21
          default: "ABCDE1234567890"
        schemeTransactionReference:
          description: >
            Scheme Transaction Reference data
          type: string
          maxLength: 32
        tokenIndicator:
          description: >
            Purpose for which token is used for
          type: string
          enum: [INSTALLMENT,RECURRING,UNSCHEDULED,NOT_APPLICABLE]          
        type: 
          example: "token"
          
    Wallet:
      allOf:
        - $ref: '#/components/schemas/Token'
      type: object
      required:
        - provider
      properties:
        provider:
          description: >
            The  Wallet provider.
          type: string
          maxLength: 32
          example: "applepay/googlepay/cryptopay"
      

      
    ApplePay:
      allOf:
        - $ref: '#/components/schemas/Wallet'
      type: object
      properties:
        type: 
          example: "applepay"
      
    GooglePay:
      allOf:
        - $ref: '#/components/schemas/Wallet'
      type: object
      properties:
        type: 
          example: "googlepay"


    CryptoWallet:
      allOf:
        - $ref: '#/components/schemas/Wallet'
      type: object
      required:
        - blockchain
      properties:
        blockchain:
          description: >
            The Blockchain Network
          type: string
          maxLength: 32
          example: "coinbase"
        type: 
          example: "cryptowallet"

          
    Card:
      allOf:
        - $ref: '#/components/schemas/PaymentInstrument'
      type: object
      description: >
        A payment card. 
      properties:
        primaryAccountNumber:
          description: >
            Primary Account Number. It is also referred as the cardholder account number.
            This is Conditional based on type of transaction. Either this and CardDetails
            or Track2Data is mandatory
          type: string
          minLength: 13
          maxLength: 19
          example: "444444xxxxxx1111"
        scheme: 
          description: >
            A reference which can be used to identify the issuer of card. This would be like eftpos,cb,amex,
            discover,alipay,wechatpay and so on.
          type: string
          maxLength: 32   
          example: "cb"
        plainExpiryDate:
          $ref: '#/components/schemas/cardDate'
        effectiveStartDate:
          $ref: '#/components/schemas/cardDate'
        cardDetails:
          description: >
            Card Details as provided by POS Client. This is Conditional. Optional for Refund Card present.
          type: string
          maxLength: 100   
        track2Data:
          description: >
             The Track 2 data of the card as defined by ISO 7813. This is Conditional and mandatory for 
             EMV Chip/Contactless and not needed for CNP. Also this is optional for Refund Card present
             transactions.
          type: string
          minLength: 7
          maxLength: 40              
        issueNo:
          type: string
          maxLength: 2
          description: >
            Card Issue Number up to 2 digits. This is the issue number that is in addition to primary card what additional card have been issued or allocated.  
        transactionSequenceNumber:
          description: >
           Transaction Sequence Counter that is incremented by one for each transaction performed by the terminal.
          type: integer
          minimum: 1
          maximum: 9999          
        transactionStatusInformation:
          description: >
            Indicates the functions performed in a transaction
          type: string
          format: byte
          minLength: 2
          maxLength: 2             
        encryptedCardPaymentData:
          $ref: '#/components/schemas/EncryptedCardPaymentData'        
        encryptedPinData:
          $ref: '#/components/schemas/EncryptedPinData'
        cardAdditionalData:
          $ref: '#/components/schemas/CardAdditionalData'   
        type: 
          example: "card"
          
          
    cardDate:
      description: >
        The plain expiry date of the card.
      type: object
      required:
        - month
        - year
      properties:
        day:
          type: integer
          format: int32
          minimum: 1
          maximum: 31
          example: 25
        month:
          type: integer
          format: int32
          minimum: 1
          maximum: 12
          example: 12
        year:
          type: integer
          minimum: 2020
          maximum: 9999
          format: int32
          example: 2020

    ICC : 
      allOf:
        - $ref: '#/components/schemas/Card'
      type: object
      description: >
        Integrated Circuit Card. A card into which one or more integrated circuits are inserted to perform processing and memory functions
      required: 
        - applicationCryptogram
        - applicationInterchangeProfile
        - applicationTransactionCounter
        - terminalVerificationResults
        - unpredictableNumber
        - transactionType
        - issuerApplicationData
        - applicationIdentifier
        - applicationVersionNumber
        - cryptogramInformationData
        - cardholderVerificationMethodResults
      properties:  
        applicationCryptogram:
          description: >
            An Application Cryptogram generated by the card when requesting online authorisation
          type: string
          format: byte
          minLength: 8
          maxLength: 8
        applicationInterchangeProfile:
          description: >
            The Application Interchange Profile specifies the application functions that the ICC supports.
          type: string
          format: byte
          minLength: 2
          maxLength: 2      
        applicationTransactionCounter:
          description: >
            Counter of transactions initiated with the card application since the application was put on the card.
          type: string
          format: byte
          minLength: 2
          maxLength: 2 
        terminalVerificationResults:
          description: >
            Terminal verification results in bits as described in Book 3 Annex C
          type: string
          format: byte
          minLength: 5
          maxLength: 5           
        unpredictableNumber:
          description: >
            Value to provide variability and uniqueness to the generation of the Application Cryptogram.
          type: string
          format: byte
          minLength: 4
          maxLength: 4 
        transactionType:
          description: >
            Cryptogram TransactionType
          type: string
          maxLength: 2 
        issuerApplicationData:
          description: >
            Issuer Application Data is a Visa-mandatory field used to transmit Visa discretionary data to the terminal for input to the online request message or clearing record
          type: string
          format: byte
          maxLength: 32
        applicationIdentifier:
          description: >
            Application Identifier is used to determine the Application on the IC card.
          type: string
          format: byte
          minLength: 5          
          maxLength: 16          
        applicationVersionNumber:
          description: >
            Terminal Application Version number.
          type: string 
          format: byte
          minLength: 2
          maxLength: 2    
        cryptogramInformationData:
          description: >
            Cryptogram Information Data
          type: string 
          minLength: 1
          maxLength: 1          
        cardholderVerificationMethodResults:
          description: >
            Cardholder Verification Method Results
          type: string
          format: byte
          minLength: 3
          maxLength: 3            
        applicationUsageControl:
          description: >
            Application Usage Control indicates restrictions limiting the application geographically or to certain types of transactions
          type: string
          format: byte
          minLength: 2
          maxLength: 2             
        issuerApplicationCodesDefault:
          description: >
            Issuer Application Code Default. IAC Default and the TAC Default together specify the conditions that cause a transaction to be rejected if it might have been approved online but the terminal is for any reason is unable to process the transaction online. 
          type: string
          format: byte
          minLength: 5
          maxLength: 5            
        issuerApplicationCodesDenial:
          description: >
            Issuer Action Code Denial. IAC Denial and the TAC Denial specify the conditions that cause the denial of the transaction without going online.
          type: string  
          minLength: 5
          maxLength: 5          
        issuerApplicationCodesOnline:
          description: >
            Issuer Action Code Online. IAC Online and the TAC Online together specify the conditions that cause the transaction to go online. 
          type: string  
          minLength: 5
          maxLength: 5          
        applicationPANSequenceNumber:
          description: >
            Identifies and differentiates cards with same PAN.
          type: string
          format: byte
          minLength: 1
          maxLength: 1
        scriptResults:
          description: >
            This field should contain the results for the issuer script commands received in the authorisation response.  In total a maxLength of 7 issuer script results can be sent in the capture request. Each result should be delimited by a semi-colon “;”. 
          type: string
          format: byte
          maxLength : 255
        formFactorIndicator:
          description: >  
            Indicates the form factor of the consumer payment device and the type of contactless interface over which the transaction was conducted. This information is made available to the issuer host. (EMV Tag 9F6E).  is mandatory for MasterCard & Visa Higher Value NFC/Contactless transactions.
          type: string
          format: byte
          minLength: 4
          maxLength: 4
        discretionaryData:
          description: >  
            Discretionary Data(EMV Tag 9F7C) or Customer exclusive data is optional for Visa Higher Value NFC/Contactless transactions depending if the data is present on the card. The tags must be sent as read from the device.
          type: string
          format: byte
          maxLength: 32         
      
    EncryptedPinData:
      type: object
      description: >
        EncryptedPinData
      required:        
        - pinBlock
        - ksn
      properties:
        initializationVector:
          description: > 
            Random number which is unique to an encrypted transaction/session and used once. This is provided as input by device(PED).
          type: string
          maxLength: 20
        pinBlock:
          description: > 
            Encrypted PIN data provided as input by device(PED)
          type: string
        ksn:
          description: >  
            Key Serial Number of the device used for taking pin as input i.e. Pin Entry Device(PED)
          type: string
    
    EncryptedCardPaymentData:
      type: object
      description: >
        EncryptedCardPaymentData
      required:        
        - chdEncryptionType
        - chdEncryptionData
        - chdksn
      properties:
        initializationVector:
          description: > 
            Random number which is unique to an encrypted transaction/session and used once. This is provided as inout by device(PED).
          type: string
        chdEncryptionType:
          description: > 
            Name of algorithm used for encrypting the card data.
          type: string
          maxLength: 30
        chdEncryptionData:
          description: > 
            Encrypted card data provided as input by device(PED).
          type: string
          maxLength: 140
        chdksn:
          description: > 
            Key Serial Number of the device used for taking pin as input i.e. Pin Entry Device(PED)
          type: string
          maxLength: 20
        encryptedExpiryDate:
          description: > 
            Encrypted Expiry Date
          type: string
          maxLength: 6

    Narrative:
      type: object
      description: >
        The narrative which appears on customer's statement
      properties:
        line1:
          description: >
            The first line of the narrative
          type: string
          maxLength: 24
        line2:
          description: >
            The second line of the narrative
          type: string
          maxLength: 24
          
    amount:
      description: >
        An amount of money in minor currency units.
      type: integer
      format: int64
      minimum: 0
      maximum: 999999999
      example: 1099
      
    currencyCode:
      description: >
        The 3-letter ISO 4217 currency code which amounts are specified in.
      type: string
      minLength: 3
      maxLength: 3
      example: GBP
    
    Value:
      type: object
      description: >
        The monetary value of the payment
      required: 
        - amount
        - currency
      properties:
        amount:
          allOf:
            - $ref: '#/components/schemas/amount'
          description: >
            The full amount the customer's card has been charged or refunded including any
            gratuity, donations or cash back, in minor currency units.
          example: 3000
        currency:
          $ref: '#/components/schemas/currencyCode'
        cashbackAmount:
          allOf:
            - $ref: '#/components/schemas/amount'
          description: >
            The amount of cash back included in the payment, in minor currency units.
          example: 2000
        gratuityAmount:
          allOf:
            - $ref: '#/components/schemas/amount'
          description: >
            The amount of gratuity included in the payment, in minor currency units.
          example: 450
        donationAmount:
          allOf:
            - $ref: '#/components/schemas/amount'
          description: >
            The amount of donation included in the payment, in minor currency units.
          example: 54
        dcc:
          allOf:
            - $ref: '#/components/schemas/dcc'
          description: >
            Data for Dynamic Currency Conversion if relevant to the payment.
              
    dcc:
      type: object
      description: >
        Data for Dynamic Currency Conversion if relevant to the payment.
      required: 
        - convertedCurrencyCode
        - convertedAmount
        - conversionRate
      properties:
        offerIdentifier:
          description: >
            Optional property which represents the DCC Offer Identifier provided by DCC 
            Provider. Using this also would be possible to fetch relevant details as well
            as might need to provide this for DCC authorisation to DCC Provider, subjected
            to requirement from DCC Provider.
          type: string
          maxLength: 25
        convertedCurrencyCode:
          description: >
            The 3-letter ISO 4217 currency code which the amount was converted to.
          allOf: 
            - $ref: '#/components/schemas/currencyCode'
          example: EUR
        convertedAmount:
          description: >
            The amount of the payment converted into the currency in minor currency units.
          allOf:
            - $ref: '#/components/schemas/amount'
          example: 3349
        conversionRate:
          allOf:
            - $ref: '#/components/schemas/dccConversionRate'
          example: 1.11647
        offerDateTime:
          $ref: '#/components/schemas/dateTime'
        provider:
          description: >
            Information regarding the Foreign Exchange rate provider.
          type: string
          default: "Global Blue"
        markupPercentage:
          description: >
            The mark up percentage rate for the foreign exchange conversion in percentage
          type: number
          format: double
          minimum: 0
          example: 3.15
          

    dccConversionRate:
      description: >
        The conversion rate from the merchant's currency to the cardholder's local currency.
      type: number
      format: double
      minimum: 0
      example: 1.11647

    transactionType:
      description: >
        Type of transaction. Default value is SALE. Mostly valid for Dual Message Protocol
      type: string
      default : "SALE"
      enum: [SALE, REFUND, VOID, SALE WITH CASHBACK, CASH, CASH ADVANCE]

    posEntryModeCapture:
      description: >
        Indicates the method by which the PAN was entered, according to the first two digits of the ISO 8583:1987 POS Entry Mode. Values are ("11","12","18","21","22","27","28","31","32","38","71","72","78","81","82","91","92","98")
      type: string
      enum: [ MANUAL_PIN, MANUAL_NO_PIN, MANUAL_SIGNATURE, MAG_PIN, MAG_NO_PIN,CNP,MAG_SIGNATURE,
              CHIP_PIN,CHIP_NO_PIN,CHIP_SIGNATURE,CTLS_PIN,CTLS_NO_PIN,CTLS_CHIP_SIGNATURE_OR_NO_CVM,MANUAL_ECOM,
              AUTO_ECOM,CTLS_MAG_PIN,CTLS_MAG_NO_PIN,CTLS_MAG_SIGNATURE_OR_NO_CVM]
            
    posEntryModeAuthorisation:
      description: >
        Indicates the method by which the PAN was entered, according to the first two digits of the ISO 8583:1987 POS Entry Mode. Values are ("00","01","02","03","04","05","07","10","80","81","90","91","92","95","98","99")
      type: string
      enum: [UNKNOWN,MANUAL,MAG_SWIPE,BARCODE,OCR,CHIP,CTLS_CHIP,MIT_COF,CHIP_FALLBACK,ECOM,CTLS_MAG_STRIPE_CVV,CTLS_MAG_SWIPE_PIN,CTLS_MAG_SWIPE_NO_PIN,CTLS_NO_CVV,CTLS_MAG_SIGNATURE,SAME_ORIGINAL]
      
    isoCountryCode:
      description: >
        The 2 letter ISO-3166-1 country code
      type: string
      pattern : /[A-Z]{2}/
      minLength: 2
      maxLength: 2
      example: GB
    

    dateTime:
      description: >
        Common date-fotmat used throughout the API
      type: string
      format: date-time
      example: "2017-07-21T17:32:28Z"
      
    transactionDateTime: 
      allOf:
        - $ref: '#/components/schemas/dateTime'
      # override description
      description: >
        The date-time at which the transaction was processed. Represented as a date-time according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6), including the relevant time zone.
      type: string
      format: date-time
      example: "2017-07-21T17:32:28Z"
    
    reportDateTime: 
      allOf:
        - $ref: '#/components/schemas/dateTime'
      # override description
      description: >
        The date-time at which the batch report was generated. Represented as a date-time according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6), including the relevant time zone.
      
  
    posTransactionResult:
      description: >
        POS determined final result for Capture for an Online Authorised Transaction.
        For APPROVED_ONLINE, value is 1, APPROVED_OFFLINE, value is 2, APPROVED_MANUAL, value is 3,DECLINED_ONLINE, value is 4, DECLINED_OFFLINE, value is 5
      type: string
      enum: [APPROVED_ONLINE,APPROVED_OFFLINE,APPROVED_MANUAL,DECLINED_ONLINE,DECLINED_OFFLINE]

    posAuthorisationResultCode:
      description: >
        Actual response code mimicked for offline transaction by POS Client. Normally this is actual response
        code returned by acquirer. This is being introduced for Offline transaction. Values are (00,05,Y1,Z1,Y2,Z2,Y3,Z3)
      type: string
      enum: [APPROVED,DECLINED,OFFLINE_APPROVED,OFFLINE_DECLINED,REFERRAL_APPROVED_CARD,
             REFERRAL_DECLINED_CARD,UNABLE_ONLINE_OFFLINE_APPROVED,UNABLE_ONLINE_OFFLINE_DECLINED]

      
    transactionReference: 
      type: string
      description: |
        A **unique** reference generated by you that is used to identify a payment throughout its lifecycle.
        ### Transaction Reference Format:
        * 64 characters max. Recommended transactionReference contains between * 9-20 characters for ease of onward processing.
        * This safeguards you against acquirers who truncate the transactionReference.
        * The same format applies for the reference parameter in partial settlement and partial refund requests.
        * Supported format, structure and limits for transactionReference:
        
        #### Valid characters:
        
        * A-Z
        * a-z
        * 0-9
        * Hyphen -
        * Underscore _
        * Forward Slash /
        * Exclamation mark !
        * At @
        * Pound, number sign, sharp or hash #
        * Dollar $
        * Percent %
        * Parenthesis ()
        * Asterisk *
        * Equal =
        * Full stop .
        * Colon :
        * Semi-colon ;
        * Question mark ?
        * Brackets []
        * Braces or Curly braces {}
        * Ampersand or And &
        * Tilde ~  
        
    Link:
      type: object
      description: >
        Link object described in 
        https://tools.ietf.org/html/draft-kelly-json-hal-08
      required:
        - href
      properties:
        href:
          description: >
            Its value is either a URI [RFC3986] or a URI Template [RFC6570].
          type: string
        templated:
          description: >
             Its value is boolean and SHOULD be true when the Link Object's "href" property is a URI Template.
          type: boolean
        type:
          description: >
             Its value is a string used as a hint to indicate the media type expected when dereferencing the target resource
          type: string
        deprecation:
          description: >
              Its presence indicates that the link is to be deprecated (i.e. removed) at a future date.  Its value is a URL that SHOULD provide further information about the deprecation.
          type: boolean
        name:
          description: >
              Its value MAY be used as a secondary key for selecting Link Objects which share the same relation type.
          type: boolean 
        profile:
          description: >
              ts value is a string which is a URI that hints about the profile (as defined by [I-D.wilde-profile-link]) of the target resource.
          type: string 
        title:
          description: >
               Its value is a string and is intended for labelling the link with a human-readable identifier (as defined by [RFC5988]).
          type: string 
        hreflang:
          description: >
              Its value is a string and is intended for indicating the language of the target resource (as defined by [RFC5988]).
          type: string 
          
    Curie: 
      type: object
      description: >
        Curie syntax described in 
        https://www.w3.org/TR/2010/NOTE-curie-20101216/
      properties:
        name:
          description: >
          type: string
          example: payments
        href:
          description: >
          type: string 
          example : https://{host}:{port}/rels/payments/{rel}
        templated:
          description: >
          type: boolean   
          example: true
          
    Location:
      description: The location where the payment is made.
      type: object
      required:
        - longitude
        - latitude
      properties:
        gpsLatitude:
          description: Latitude
          type: number
          format: double
          example: -0.0924715
        gpsLongitude:
          description: Longitude
          type: number
          format: double
          example: 51.5112402
    
    CardAdditionalData:
      type: object
      description: Additional card data to verify the card and the primary card holder.
      properties:
        cvc: 
          description: > 
            CVC is a unique set of 3 or 4 numbers on the back of the card. Our API checks to see if the CVC supplied matches the CVC held by the issuing bank.
          type: string
          minLength: 3
          maxLength: 4
        billingAddress:
          $ref: '#/components/schemas/BillingAddress'
    BillingAddress:
      type: object
      description: >
        An object containing the billing address information. This is used for Address Verification Service (AVS)
      required:
        - address1
        - city
        - countryCode
        - postCode
      properties:
        address1:
          description: >
            The first line of the address
          type: string
          minLength: 1
          maxLength: 140
        address2:
          description: >
            The second line of the address
          type: string
          minLength: 1
          maxLength: 140
        address3:
          description: >
            The third line of the address
          type: string
          minLength: 1
          maxLength: 140
        city:
          description: >
            City of the address
          type: string
          minLength: 1
          maxLength: 140
          example: London
        state:
          description: >
            State/County/Region of the address
          type: string
          minLength: 1
          maxLength: 140
          example: Greater London
        postalCode:
          description: >
            Postal code (Post/Zip code) of the address
          type: string
          minLength: 1
          maxLength: 8
          example: EC4N 8AF
        countryCode:
          $ref: '#/components/schemas/isoCountryCode'        

    BatchReport:
      type: object
      description: >
      properties:
        batchReference:
          description: >
            Batch reference
          type: string
        reportDate:
          allOf:
            - $ref: '#/components/schemas/reportDateTime'
        batchSummary:
          type: object
          description: >
            Breakdown report for each scheme.
          additionalProperties:
            type: object
            properties:
              scheme:
                description: >
                  Card scheme 
                type: string
              creditTransactionCount:
                description: >
                  Total number of credit transactions
                type: string
                minimum: 0
                maximum: 999999999
              debitTransactionCount:
                description: >
                  Total number of debit transactions
                type: integer
                minimum: 0
                maximum: 999999999
              totalCreditAmount:
                allOf:
                  - $ref: '#/components/schemas/amount'
                description: >
                  Total credit amount in the terminal's base currency
                example: 3000
              totalDebitAmount:
                allOf:
                  - $ref: '#/components/schemas/amount'
                description: >
                  Total debit amount in the terminal's base currency
                example: 1500
          
    ReconciliationRequest:
      type: object
      description: >
      properties:
        declinedTransactionCount:
          description: >
            Total number of declined transactions
          type: integer
          minimum: 0
          maximum: 999999999
        creditTransactionCount:
          description: >
            Total number of credit transactions
          type: string
          minimum: 0
          maximum: 999999999
        debitTransactionCount:
          description: >
            Total number of debit transactions
          type: integer
          minimum: 0
          maximum: 999999999
        totalCreditAmount:
          allOf:
            - $ref: '#/components/schemas/amount'
          description: >
            Total credit amount in the terminal's base currency
          example: 3000
        totalDebitAmount:
          allOf:
            - $ref: '#/components/schemas/amount'
          description: >
            Total debit amount in the terminal's base currency
          example: 1500
    
    Errors:
      type: object
      allOf:
        - $ref: '#/components/schemas/Error'
      properties: 
        validationErrors:
          type: array
          description: A list of validation errors 
          items:
            $ref: '#/components/schemas/ValidationError'      
    Error:
      type: object
      required:
        - errorName
        - message
      properties:
        errorName:
          type: string
          description: A machine and human readable error type for clarity and semantic understanding of the error.
        message:
          type: string
          description: A human readable message giving a corrective action for the error. This is not for machine consumption.
          
    ValidationError:
      type: object
      allOf:
        - $ref: '#/components/schemas/Error'
      properties:
        jsonPath:
          type: string
          description: This field represents the JSONPath  of the element within the request body associated with the error
        pathParameter:
          type: string
          description: This field identifies a path parameter within the request URL that caused an error - e.g. a resource reference
        queryParameter:
          type: string
          description: This field represents the name of a query parameter within the request URL that caused the error

  responses:
    InvalidRequest:
      description: Invalid Request
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Errors'
    Unauthorized:
      description: Unauthorized
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Errors'
    Forbidden:
      description: Forb idden
      content:
        'application/json':
          schema: 
            $ref: '#/components/schemas/Errors'
    InternalServerError:
      description: Internal Server Error
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Errors'

  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT
